"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class View {
  _data;
  _clearAndInsert(markup) {
    this._parentElement.innerHTML = '';
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  render(data) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;
    const markup = this._generateMarkup();
    this._clearAndInsert(markup);
  }
  update(data) {
    this._data = data;
    const newMarkup = this._generateMarkup(); //string
    //console.log(newMarkup);

    //convert newMarkup (string format) to a DOM object
    const newDOM = document.createRange().createContextualFragment(newMarkup);
    console.log(newDOM);
    const newElements = newDOM.querySelectorAll('*');
    console.log(newElements);
  }
  renderSpinner = function () {
    const markup = ` <div class="spinner">
    <svg>
      <use href="${_icons.default}#icon-loader"></use>
    </svg>
  </div>`;
    this._clearAndInsert(markup);
  };
  _generateMarkupIngredient(ingredient) {
    return ` <li class="recipe__ingredient">
    <svg class="recipe__icon">
      <use href="${_icons.default}#icon-check"></use>
    </svg>
    <div class="recipe__quantity">${ingredient.quantity ? new Fraction(ingredient.quantity).toString() : ''}</div>
    <div class="recipe__description">
      <span class="recipe__unit">${ingredient.unit}</span>
      ${ingredient.description}
    </div>
  </li>`;
  }
  renderError() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._errorMessage;
    const markup = `<div class="error">
    <div>
      <svg>
        <use href="${_icons.default}#icon-alert-triangle"></use>
      </svg>
    </div>
    <p>${message}</p>
  </div>`;
    this._clearAndInsert(markup);
  }
  renderMessage() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._successMessage;
    const markup = ` <div class="recipe">
    <div class="message">
      <div>
        <svg>
          <use href="${_icons.default}#icon-smile"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>`;
    this._clearAndInsert(markup);
  }
}
exports.default = View;